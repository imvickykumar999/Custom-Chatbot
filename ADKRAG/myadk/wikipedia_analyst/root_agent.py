
from google.adk.agents import Agent
# from google.adk.tools import google_search
import requests
import json
from typing import Dict, Any

# Define the constant URL outside the function signature to simplify parsing
LOCAL_API_URL = "http://127.0.0.1:8000/bot/api/search/"

def search_api(question: str) -> str:
    """
    Sends a search query to the local RAG API endpoint and returns the raw JSON response.
    Use this tool for all factual queries requiring internal blog information.

    Args:
        question (str): The question or query to send to the API.

    Returns:
        str: The raw JSON text response from the API, containing the 'answer' 
             and 'graph_url' generated by the RAG system.
    """
    url = LOCAL_API_URL
    
    payload = json.dumps({
        "question": question
    })
    headers = {
        'Content-Type': 'application/json',
    }

    try:
        # Use a timeout for stability
        response = requests.post(url, headers=headers, data=payload, timeout=30)
        response.raise_for_status()  # Raises an HTTPError if the response was an error
        
        # Return the raw JSON text for the LLM to parse and summarize
        return response.text 
        
    except requests.exceptions.RequestException as e:
        return f"An error occurred while connecting to {url}: {e}"
    except Exception as e:
        return f"An unexpected error occurred: {e}"

# Define the Agent based on the instructions from the original Flask project
root_agent = Agent(
    name="wikipedia_analyst",
    model="gemini-2.5-flash", 
    description="A knowledgeable agent that provides concise, factual information on any topic, drawing from an internal RAG system for accurate and summarized overviews.",
    instruction="""
    You are a Wikipedia-style agent with vast knowledge. You MUST use the 'search_api' tool for all factual queries. Your responses should be short, factual, and neutral.

    Primary Responsibilities:

    1. Answer queries with brief, accurate summaries based *only* on the JSON output of the 'search_api' tool (specifically using the 'answer' field).
    2. Cover key facts, definitions, timelines, or explanations in 3-5 sentences max.
    3. Use simple language accessible to all users.
    4. Cite the source implicitly by referencing the RAG Summary provided by the tool.

    Guidelines:

    Keep outputs under 100 words and use emojis if possible.
    Structure responses with a lead summary followed by bullet points for key details if helpful.
    Avoid fluff, promotions, or personal anecdotes.
    """,
    tools=[
        # The corrected search_api function
        search_api, 
    ],
)

